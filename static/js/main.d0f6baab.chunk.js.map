{"version":3,"sources":["assets/noPosterSmall.png","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TVshows/TVshowsPresenter.js","Routes/TVshows/index.js","Routes/TVshows/TVshowsContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Details/DetailsPresenter.js","Routes/Details/index.js","Routes/Details/DetailsContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["Sheader","styled","header","List","ul","Item","li","props","current","Slink","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","Span","Loader","role","aria-label","Text","color","Message","text","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","require","length","substring","HomePresenter","nowPlaying","upcoming","popular","error","loading","Helmet","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","process","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","a","data","results","this","setState","React","Component","TVshowsPresenter","topRated","airingToday","show","original_name","first_air_date","TVshowsContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","searchByTerm","event","target","preventDefault","Backdrop","bgImage","Content","Cover","Data","h1","Rate","h3","ItemContainer","Divider","Overview","p","VideoContainer","Video","iframe","SeasonsList","Season","Companies","stars","rate","intRate","parseInt","others","repeat","DetailsPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","href","imdb_id","src","alt","homepage","production_companies","company","logo_path","overview","videos","key","allowFullScreen","seasons","season","season_number","DetailsContainer","includes","match","push","history","parsedId","isNaN","Router","path","exact","component","Home","TVshows","Search","Details","from","globalStyles","createGlobalStyle","reset","App","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0f6baab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.6a1c6526.png\";","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Sheader = styled.header`\n    color: white;\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    background-color: rgba(20, 20, 20, 0.8);\n    z-index: 10;\n    box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n    display: flex;\n`;\n\nconst Item = styled.li`\n    width: 80px;\n    height: 50px;\n    text-align: center;\n    border-bottom: 3px solid\n        ${(props) => (props.current ? \"#3498db\" : \"transparant\")};\n    transition: border-bottom 0.5s ease-in-out;\n`;\n\nconst Slink = styled(Link)`\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Header = ({ location: { pathname } }) => (\n    <Sheader>\n        <List>\n            <Item current={pathname === \"/\"}>\n                <Slink to=\"/\">Movies</Slink>\n            </Item>\n            <Item current={pathname === \"/tv\"}>\n                <Slink to=\"/tv\">TV</Slink>\n            </Item>\n            <Item current={pathname === \"/search\"}>\n                <Slink to=\"/search\">Search</Slink>\n            </Item>\n        </List>\n    </Sheader>\n);\n\n// 어떤 컴포넌트와도 연결할 수 있는 withRouter?\nexport default withRouter(Header);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    :not(:last-child) {\n        margin-bottom: 50px;\n    }\n`;\n\nconst Title = styled.span`\n    font-size: 16px;\n    font-weight: 600;\n`;\n\nconst Grid = styled.div`\n    margin-top: 25px;\n    display: grid;\n    grid-gap: 25px;\n    grid-template-columns: repeat(auto-fill, 125px);\n`;\n\n/*\nchildren은 예약되어 있는 react prop임.(기본적으로 제공됨.)\n하위 항목들이 자동적으로 children으로 귀속됨?\n*/\nconst Section = ({ title, children }) => (\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n    ]),\n};\n\nexport default Section;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    height: 100vh;\n    width: 100vw;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 28px;\n    margin-top: 20px;\n`;\n\nconst Span = styled.span`\n    font-size: 60px;\n\n    :not(:first-child) {\n        margin-top: 15px;\n        font-size: 30px;\n        font-weight: 400;\n    }\n`;\n\nconst Loader = () => (\n    <Container>\n        <Span role=\"img\" aria-label=\"Loading\">\n            ⏰\n        </Span>\n        <Span aria-label=\"Loading\">Loading...</Span>\n    </Container>\n);\n\nexport default Loader;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst Container = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Text = styled.span`\n    color: ${(props) => props.color};\n    font-weight: 600;\n`;\n\nconst Message = ({ text, color }) => (\n    <Container>\n        <Text>{text}</Text>\n    </Container>\n);\n\nMessage.propTypes = {\n    text: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n};\n\nexport default Message;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst Container = styled.div`\n    font-size: 12px;\n`;\n\nconst Image = styled.div`\n    background-image: url(${(props) => props.bgUrl});\n    height: 180px;\n    background-size: cover;\n    border-radius: 4px;\n    background-position: center center;\n    transition: opacity 0.1s ease-in-out;\n`;\n\nconst Rating = styled.span`\n    position: absolute;\n    top: 10px;\n    left: 5px;\n    opacity: 0;\n    transition: opacity 0.1s ease-in-out;\n`;\n\nconst ImageContainer = styled.div`\n    margin-bottom: 5px;\n    position: relative;\n    &:hover {\n        ${Image} {\n            opacity: 0.3;\n        }\n        ${Rating} {\n            opacity: 1;\n        }\n    }\n`;\n\nconst Title = styled.span`\n    display: block;\n    margin-bottom: 3px;\n`;\n\nconst Year = styled.span`\n    font-size: 10px;\n    color: rgba(255, 255, 255, 0.55);\n`;\n\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n    <Link to={isMovie ? `/movie/${id}` : `/tv/${id}`}>\n        <Container>\n            <ImageContainer>\n                <Image\n                    bgUrl={\n                        imageUrl\n                            ? `https://image.tmdb.org/t/p/w300${imageUrl}`\n                            : require(\"../assets/noPosterSmall.png\")\n                    }\n                />\n                <Rating>\n                    <span role=\"img\" aria-label=\"Review Rating\">\n                        ⭐️\n                    </span>{\" \"}\n                    {rating}/10\n                </Rating>\n            </ImageContainer>\n            <Title>\n                {title.length > 17 ? `${title.substring(0, 17)}...` : title}\n            </Title>\n            <Year>{year}</Year>\n        </Container>\n    </Link>\n);\n\nPoster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool,\n};\n\nexport default Poster;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\n//데이터가 로딩 되었는지를 항상 확인할 것.\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) =>\n    loading ? (\n        <>\n            <Helmet>\n                <title>Loading... | Hyoflix</title>\n            </Helmet>\n            <Loader />\n        </>\n    ) : (\n        <Container>\n            <Helmet>\n                <title>Movies | Hyofilx</title>\n            </Helmet>\n            {nowPlaying && nowPlaying.length > 0 && (\n                <Section title=\"Now Playing\">\n                    {nowPlaying.map((movie) => (\n                        <Poster\n                            id={movie.id}\n                            imageUrl={movie.poster_path}\n                            title={movie.original_title}\n                            rating={movie.vote_average}\n                            year={\n                                movie.release_date &&\n                                movie.release_date.substring(0, 4)\n                            }\n                            isMovie={true}\n                        />\n                    ))}\n                </Section>\n            )}\n            {upcoming && upcoming.length > 0 && (\n                <Section title=\"Upcoming Movies\">\n                    {upcoming.map((movie) => (\n                        <Poster\n                            id={movie.id}\n                            imageUrl={movie.poster_path}\n                            title={movie.original_title}\n                            rating={movie.vote_average}\n                            year={\n                                movie.release_date &&\n                                movie.release_date.substring(0, 4)\n                            }\n                            isMovie={true}\n                        />\n                    ))}\n                </Section>\n            )}\n            {popular && popular.length > 0 && (\n                <Section title=\"Popular Movies\">\n                    {popular.map((movie) => (\n                        <Poster\n                            id={movie.id}\n                            imageUrl={movie.poster_path}\n                            title={movie.original_title}\n                            rating={movie.vote_average}\n                            year={\n                                movie.release_date &&\n                                movie.release_date.substring(0, 4)\n                            }\n                            isMovie={true}\n                        />\n                    ))}\n                </Section>\n            )}\n            {error && <Message text={error} color=\"#e74c3c\" />}\n        </Container>\n    );\n\nHomePresenter.propTypes = {\n    nowPlaying: PropTypes.array,\n    upcoming: PropTypes.array,\n    popular: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nexport default HomePresenter;\n","import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: \"https://api.themoviedb.org/3/\",\n    params: {\n        api_key: `${process.env.REACT_APP_API_KEY}`,\n        language: \"en-US\",\n    },\n});\n\nexport const moviesApi = {\n    nowPlaying: () => api.get(\"movie/now_playing\"),\n    upcoming: () => api.get(\"movie/upcoming\"),\n    popular: () => api.get(\"movie/popular\"),\n    movieDetail: (id) =>\n        api.get(`movie/${id}`, {\n            params: {\n                append_to_response: \"videos\",\n            },\n        }),\n    search: (term) =>\n        api.get(\"search/movie\", {\n            params: {\n                // encodeURIComponent : 어떤 값을 넘기든 그 값을 인코딩하여, 완성된 문자열로 검색할 것임.\n                // 검색이 안된다면, axios가 기본적으로 encode하고 있지 않은지 생각해볼 것.\n                query: encodeURIComponent(term),\n            },\n        }),\n};\n\nexport const tvApi = {\n    topRated: () => api.get(\"tv/top_rated\"),\n    popular: () => api.get(\"tv/popular\"),\n    airingToday: () => api.get(\"tv/airing_today\"),\n    showDetail: (id) =>\n        api.get(`tv/${id}`, {\n            params: {\n                append_to_response: \"videos\",\n            },\n        }),\n    search: (term) =>\n        api.get(\"search/tv\", {\n            params: {\n                // encodeURIComponent : 어떤 값을 넘기든 그 값을 인코딩하여, 완성된 문자열로 검색할 것임.\n                query: encodeURIComponent(term),\n            },\n        }),\n};\n","import HomeContainer from \"./HomeContainer\";\n\nexport default HomeContainer;\n","import React from \"react\";\nimport HomePresenter from \"./HomePresenter\";\nimport { moviesApi } from \"../../api\";\n\nclass HomeContainer extends React.Component {\n    state = {\n        nowPlaying: null,\n        upcoming: null,\n        popular: null,\n        error: null,\n        loading: true,\n    };\n\n    async componentDidMount() {\n        try {\n            const {\n                data: { results: nowPlaying },\n            } = await moviesApi.nowPlaying();\n            const {\n                data: { results: upcoming },\n            } = await moviesApi.upcoming();\n            const {\n                data: { results: popular },\n            } = await moviesApi.popular();\n            this.setState({\n                nowPlaying,\n                upcoming,\n                popular,\n            });\n        } catch {\n            this.setState({\n                error: \"Can't find movie informations.\",\n            });\n        } finally {\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render() {\n        const { nowPlaying, upcoming, popular, error, loading } = this.state;\n        return (\n            <HomePresenter\n                nowPlaying={nowPlaying}\n                upcoming={upcoming}\n                popular={popular}\n                error={error}\n                loading={loading}\n            />\n        );\n    }\n}\n\nexport default HomeContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n    padding: 20px;\n`;\n\nconst TVshowsPresenter = ({ topRated, popular, airingToday, loading, error }) =>\n    loading ? (\n        <>\n            <Helmet>\n                <title>Loading... | Hyoflix</title>\n            </Helmet>\n            <Loader />\n        </>\n    ) : (\n        <Container>\n            <Helmet>\n                <title>TV Shows | Hyofilx</title>\n            </Helmet>\n            {topRated && topRated.length > 0 && (\n                <Section title=\"Top Rated Shows\">\n                    {topRated.map((show) => (\n                        <Poster\n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name}\n                            rating={show.vote_average}\n                            year={\n                                show.first_air_date &&\n                                show.first_air_date.substring(0, 4)\n                            }\n                        />\n                    ))}\n                </Section>\n            )}\n            {popular && popular.length > 0 && (\n                <Section title=\"Popular Shows\">\n                    {popular.map((show) => (\n                        <Poster\n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name}\n                            rating={show.vote_average}\n                            year={\n                                show.first_air_date &&\n                                show.first_air_date.substring(0, 4)\n                            }\n                        />\n                    ))}\n                </Section>\n            )}\n            {airingToday && airingToday.length > 0 && (\n                <Section title=\"Shows Airing Today\">\n                    {airingToday.map((show) => (\n                        <Poster\n                            id={show.id}\n                            imageUrl={show.poster_path}\n                            title={show.original_name}\n                            rating={show.vote_average}\n                            year={\n                                show.first_air_date &&\n                                show.first_air_date.substring(0, 4)\n                            }\n                        />\n                    ))}\n                </Section>\n            )}\n            {error && <Message text={error} color=\"#e74c3c\" />}\n        </Container>\n    );\n\nTVshowsPresenter.propTypes = {\n    topRated: PropTypes.array,\n    popular: PropTypes.array,\n    airingToday: PropTypes.array,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n};\n\nexport default TVshowsPresenter;\n","import TVshowsContainer from \"./TVshowsContainer\";\n\nexport default TVshowsContainer;\n","import React from \"react\";\nimport { tvApi } from \"../../api\";\nimport TVshowsPresenter from \"./TVshowsPresenter\";\n\nclass TVshowsContainer extends React.Component {\n    state = {\n        topRated: null,\n        popular: null,\n        airingToday: null,\n        loading: true,\n        error: null,\n    };\n\n    async componentDidMount() {\n        try {\n            const {\n                data: { results: topRated },\n            } = await tvApi.topRated();\n            const {\n                data: { results: popular },\n            } = await tvApi.popular();\n            const {\n                data: { results: airingToday },\n            } = await tvApi.airingToday();\n\n            this.setState({\n                topRated,\n                popular,\n                airingToday,\n            });\n        } catch {\n            this.setState({\n                error: \"Can't find tv show's informations.\",\n            });\n        } finally {\n            this.setState({ loading: false });\n        }\n    }\n\n    render() {\n        const { topRated, popular, airingToday, loading, error } = this.state;\n        return (\n            <TVshowsPresenter\n                topRated={topRated}\n                popular={popular}\n                airingToday={airingToday}\n                loading={loading}\n                error={error}\n            />\n        );\n    }\n}\n\nexport default TVshowsContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"../../Components/Loader\";\nimport Section from \"../../Components/Section\";\nimport Message from \"../../Components/Message\";\nimport Poster from \"../../Components/Poster\";\n\nconst Container = styled.div`\n    padding: 0px 20px;\n`;\n\nconst Form = styled.form`\n    margin-bottom: 50px;\n`;\n\nconst Input = styled.input`\n    all: unset;\n    width: 100%;\n    font-size: 28px;\n`;\n\nconst SearchPresenter = ({\n    movieResults,\n    tvResults,\n    searchTerm,\n    loading,\n    handleSubmit,\n    updateTerm,\n    error,\n}) => (\n    <Container>\n        <Helmet>\n            <title>Search | Hyoflix</title>\n        </Helmet>\n        <Form onSubmit={handleSubmit}>\n            <Input\n                placeholder=\"Search Movies or Shows...\"\n                value={searchTerm}\n                onChange={updateTerm}\n            ></Input>\n        </Form>\n        {loading ? (\n            <>\n                <Helmet>\n                    <title>Loading... | Hyoflix</title>\n                </Helmet>\n                <Loader />\n            </>\n        ) : (\n            <>\n                {movieResults && movieResults.length > 0 && (\n                    <Section title=\"Movies Results\">\n                        {movieResults.map((movie) => (\n                            <Poster\n                                id={movie.id}\n                                imageUrl={movie.poster_path}\n                                title={movie.original_title}\n                                rating={movie.vote_average}\n                                year={\n                                    movie.release_date &&\n                                    movie.release_date.substring(0, 4)\n                                }\n                                isMovie={true}\n                            />\n                        ))}\n                    </Section>\n                )}\n                {tvResults && tvResults.length > 0 && (\n                    <Section title=\"TV Shows Results\">\n                        {tvResults.map((show) => (\n                            <Poster\n                                id={show.id}\n                                imageUrl={show.poster_path}\n                                title={show.original_name}\n                                rating={show.vote_average}\n                                year={\n                                    show.first_air_date &&\n                                    show.first_air_date.substring(0, 4)\n                                }\n                            />\n                        ))}\n                    </Section>\n                )}\n                {error && <Message text={error} color=\"#e74c3c\" />}\n                {tvResults &&\n                    movieResults &&\n                    tvResults.length === 0 &&\n                    movieResults.length === 0 && (\n                        <Message\n                            text={`Nothing Found.. for: ${searchTerm}`}\n                            color=\"#95a5a6\"\n                        />\n                    )}\n            </>\n        )}\n    </Container>\n);\n\nSearchPresenter.propTypes = {\n    movieResults: PropTypes.array,\n    tvResults: PropTypes.array,\n    searchTerm: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n    updateTerm: PropTypes.func.isRequired,\n    error: PropTypes.string,\n};\n\nexport default SearchPresenter;\n","import SearchContainer from \"./SearchContainer\";\n\nexport default SearchContainer;\n","import React from \"react\";\nimport { moviesApi, tvApi } from \"../../api\";\nimport SearchPresenter from \"./SearchPresenter\";\n\nclass SearchContainer extends React.Component {\n    state = {\n        movieResults: null,\n        tvResults: null,\n        searchTerm: \"\",\n        // 사용자가 검색하기 전까지는 어느것도 로드하지 않음.\n        loading: false,\n        error: null,\n    };\n\n    searchByTerm = async (term) => {\n        this.setState({ loading: true });\n        try {\n            const {\n                data: { results: movieResults },\n            } = await moviesApi.search(term);\n            const {\n                data: { results: tvResults },\n            } = await tvApi.search(term);\n            this.setState({ movieResults, tvResults });\n        } catch {\n            this.setState({ error: \"Can't find results!\" });\n        } finally {\n            this.setState({ loading: false });\n        }\n    };\n\n    updateTerm = (event) => {\n        const {\n            target: { value },\n        } = event;\n        this.setState({\n            searchTerm: value,\n        });\n    };\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        const { searchTerm } = this.state;\n        if (searchTerm !== \"\") {\n            this.searchByTerm(searchTerm);\n        }\n    };\n\n    render() {\n        const { movieResults, tvResults, searchTerm, loading, error } =\n            this.state;\n        return (\n            <SearchPresenter\n                movieResults={movieResults}\n                tvResults={tvResults}\n                searchTerm={searchTerm}\n                loading={loading}\n                error={error}\n                handleSubmit={this.handleSubmit}\n                updateTerm={this.updateTerm}\n            />\n        );\n    }\n}\n\nexport default SearchContainer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Helmet from \"react-helmet\";\nimport Loader from \"../../Components/Loader\";\n\nconst Container = styled.div`\n    height: calc(100vh - 50px);\n    width: 100%;\n    position: relative;\n    padding: 50px;\n`;\n\nconst Backdrop = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: url(${(props) => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    filter: blur(5px);\n    opacity: 0.5;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    width: 100%;\n    height: 100%;\n    position: relative;\n    z-index: 1;\n`;\n\nconst Cover = styled.div`\n    width: 30%;\n    background-image: url(${(props) => props.bgImage});\n    background-position: center center;\n    background-size: cover;\n    height: 100%;\n    border-radius: 5px;\n`;\n\nconst Data = styled.div`\n    width: 70%;\n    margin-left: 10px;\n`;\n\nconst Title = styled.h1`\n    font-size: 40px;\n    margin-bottom: 10px;\n`;\n\nconst Rate = styled.h3`\n    font-size: 18px;\n    margin-bottom: 30px;\n`;\n\nconst ItemContainer = styled.div`\n    display: flex;\n    margin-bottom: 15px;\n`;\n\nconst Item = styled.span`\n    font-size: 15px;\n    font-weight: 400;\n    text-align: center;\n    a {\n        &:hover {\n            opacity: 0.6;\n        }\n        transition: opacity 0.1s ease-in-out;\n    }\n    img {\n        width: 30px;\n        height: 23px;\n    }\n`;\n\nconst Divider = styled.span`\n    margin: 0px 5px;\n    text-align: center;\n`;\n\nconst Overview = styled.p`\n    width: 50%;\n    line-height: 1.5;\n`;\n\nconst VideoContainer = styled.div`\n    margin-top: 5%;\n    width: 100%;\n    display: grid;\n    grid-gap: 15px;\n    grid-template-columns: repeat(3, 320px);\n    grid-template-rows: 180px;\n`;\n\nconst Video = styled.iframe`\n    width: 100%;\n    height: 100%;\n`;\n\nconst SeasonsList = styled.div`\n    display: flex;\n    margin-top: 30px;\n    width: 80%;\n    overflow-y: hidden;\n    // hide scrollbar\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n    &::-webkit-scrollbar {\n        display: none;\n    }\n`;\n\nconst Season = styled.div`\n    margin-left: 5px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    &:first-child {\n        margin-left: 0px;\n    }\n    img {\n        width: 100px;\n        height: 150px;\n        border-radius: 3px;\n        margin-bottom: 6px;\n    }\n    span {\n        font-size: 13px;\n        font-weight: 400;\n    }\n`;\n\nconst Companies = styled.div`\n    display: flex;\n    align-items: center;\n    margin: 20px 0px;\n    img {\n        height: min-content;\n        width: 70px;\n        margin-left: 15px;\n        &:first-child {\n            margin-left: 0px;\n        }\n    }\n`;\n\nconst stars = (rate) => {\n    const intRate = parseInt(rate / 2);\n    const others = 5 - intRate;\n    return `${\"★\".repeat(intRate)}${\"☆\".repeat(others)}`;\n};\n\nconst DetailsPresenter = ({ result, error, loading, isMovie }) => {\n    return loading ? (\n        <>\n            <Helmet>\n                <title>Loading... | Hyoflix</title>\n            </Helmet>\n            <Loader />\n        </>\n    ) : (\n        <Container>\n            <Helmet>\n                <title>\n                    {`${\n                        result.original_title\n                            ? result.original_title\n                            : result.original_name\n                    } | Hyofilx`}\n                </title>\n            </Helmet>\n            <Backdrop\n                bgImage={`https://image.tmdb.org/t/p/original${result.backdrop_path}`}\n            />\n            <Content>\n                <Cover\n                    bgImage={\n                        result.poster_path\n                            ? `https://image.tmdb.org/t/p/original${result.poster_path}`\n                            : require(\"../../assets/noPosterSmall.png\")\n                    }\n                />\n                <Data>\n                    <Title>\n                        {result.original_title\n                            ? result.original_title\n                            : result.original_name}\n                    </Title>\n                    <Rate>{`${result.vote_average} ${stars(\n                        result.vote_average\n                    )}`}</Rate>\n                    <ItemContainer>\n                        <Item>\n                            {result.release_date\n                                ? result.release_date.substring(0, 4)\n                                : result.first_air_date.substring(0, 4)}\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.runtime\n                                ? `${result.runtime} min`\n                                : `${result.episode_run_time[0]} min`}\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {result.genres &&\n                                result.genres.map((genre, index) =>\n                                    index === result.genres.length - 1\n                                        ? genre.name\n                                        : `${genre.name} / `\n                                )}\n                        </Item>\n                        <Divider>•</Divider>\n                        <Item>\n                            {isMovie ? (\n                                <a\n                                    href={`https://www.imdb.com/title/${result.imdb_id}`}\n                                >\n                                    <img\n                                        src=\"https://cdn0.iconfinder.com/data/icons/social-media-logo-4/32/Social_Media_imdb-512.png\"\n                                        alt=\"IMDB\"\n                                    />\n                                </a>\n                            ) : (\n                                <a href={result.homepage}>\n                                    <span>Homepage</span>\n                                </a>\n                            )}\n                        </Item>\n                    </ItemContainer>\n                    <Companies>\n                        {result.production_companies.map(\n                            (company) =>\n                                company.logo_path && (\n                                    <img\n                                        src={`https://image.tmdb.org/t/p/w300${company.logo_path}`}\n                                        alt={company.name}\n                                    />\n                                )\n                        )}\n                    </Companies>\n                    <Overview>{result.overview}</Overview>\n                    <VideoContainer>\n                        {result.videos\n                            ? result.videos.results.map(\n                                  (movie, index) =>\n                                      index <= 2 && (\n                                          <Video\n                                              key={movie.id}\n                                              src={`https://www.youtube.com/embed/${movie.key}`}\n                                              allowFullScreen\n                                          />\n                                      )\n                              )\n                            : null}\n                    </VideoContainer>\n                    <SeasonsList>\n                        {result.seasons\n                            ? result.seasons.map((season) => (\n                                  <Season>\n                                      <img\n                                          src={\n                                              season.poster_path &&\n                                              season.poster_path !== null\n                                                  ? `https://image.tmdb.org/t/p/w300${season.poster_path}`\n                                                  : require(\"../../assets/noPosterSmall.png\")\n                                          }\n                                          alt={season.season_number}\n                                      ></img>\n                                      <span>{`season ${season.season_number}`}</span>\n                                  </Season>\n                              ))\n                            : null}\n                    </SeasonsList>\n                </Data>\n            </Content>\n        </Container>\n    );\n};\n\nDetailsPresenter.propTypes = {\n    result: PropTypes.object,\n    error: PropTypes.string,\n    loading: PropTypes.bool.isRequired,\n    isMovie: PropTypes.bool.isRequired,\n};\n\nexport default DetailsPresenter;\n","import DetailsContainer from \"./DetailsContainer\";\n\nexport default DetailsContainer;\n","import React from \"react\";\nimport { moviesApi, tvApi } from \"../../api\";\nimport DetailsPresenter from \"./DetailsPresenter\";\n\nclass DetailsContainer extends React.Component {\n    constructor(props) {\n        super(props);\n        const {\n            location: { pathname },\n        } = props;\n        this.state = {\n            // id를 가지고 결과를 보여줄 예정\n            result: null,\n            error: null,\n            loading: true,\n            isMovie: pathname.includes(\"/movie/\"),\n        };\n    }\n\n    async componentDidMount() {\n        const {\n            match: {\n                params: { id },\n            },\n            history: { push },\n        } = this.props;\n        const { isMovie } = this.state;\n        const parsedId = parseInt(id);\n        if (isNaN(parsedId)) {\n            return push(\"/\");\n        }\n        let result = null;\n        try {\n            if (isMovie) {\n                ({ data: result } = await moviesApi.movieDetail(parsedId));\n            } else {\n                ({ data: result } = await tvApi.showDetail(parsedId));\n            }\n        } catch {\n            this.setState({ error: \"Can't find anything.\" });\n        } finally {\n            this.setState({ loading: false, result });\n        }\n    }\n    render() {\n        const { result, error, loading, isMovie } = this.state;\n        return (\n            <DetailsPresenter\n                result={result}\n                error={error}\n                loading={loading}\n                isMovie={isMovie}\n            />\n        );\n    }\n}\n\nexport default DetailsContainer;\n","import React from \"react\";\nimport {\n    BrowserRouter as BRouter,\n    Route,\n    Redirect,\n    Switch,\n} from \"react-router-dom\";\nimport Header from \"../Components/Header\";\nimport Home from \"../Routes/Home\";\nimport TVshows from \"../Routes/TVshows\";\nimport Search from \"../Routes/Search\";\nimport Details from \"../Routes/Details\";\n\nconst Router = () => (\n    <BRouter>\n        <>\n            <Header />\n            <Switch>\n                <Route path=\"/\" exact component={Home} />\n                <Route path=\"/tv\" exact component={TVshows} />\n                <Route path=\"/search\" component={Search} />\n                <Route path=\"/movie/:id\" component={Details} />\n                <Route path=\"/tv/:id\" component={Details} />\n                <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n        </>\n    </BRouter>\n);\n// Redirect: 일치하는 url이 없을 경우 / 으로 보내 버림.\n\nexport default Router;\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\nconst globalStyles = createGlobalStyle`\n    ${reset}\n    a {\n        text-decoration: none;\n        color: inherit;\n    }\n    * {\n        box-sizing: border-box;\n    }\n    body {\n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size: 12px;\n        background-color: rgba(20, 20, 20, 1);\n        color: white;\n        padding-top: 50px;\n    }\n`;\n\nexport default globalStyles;\n","import React from \"react\";\nimport Router from \"../Components/Router\";\nimport GlobalStyles from \"./GlobalStyles\";\n\nfunction App() {\n    return (\n        <>\n            <Router />\n            <GlobalStyles />\n        </>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}